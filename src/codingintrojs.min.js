/**
 * CodingIntroJS.js
 * A lightweight library for interactive guided tours with a stylish spotlight effect.
 *
 * Internal Documentation:
 *  - Manages guided tours by highlighting target DOM elements with an advanced iOS-like blur effect.
 *  - Uses a dynamic overlay with a mask to spotlight elements.
 *  - Developers can customize tooltip background, title, and content colors via options.
 *  - Note: The spotlight border feature is deprecated and has been removed.
 *
 * Usage:
 *   const tour = new CodingIntroJS(steps, {
 *     tooltipBackgroundColor: 'linear-gradient(135deg, #333, #111)',
 *     tooltipTitleColor: '#0af',
 *     tooltipContentColor: '#ddd'
 *   });
 *   tour.init();
 *
 * @version 1.0.0
 */

class CodingIntroJS{constructor(t,e={}){this.steps=t,this.currentStep=0,this.options={spotlightPadding:20,overlayOpacity:.92,overlayColor:"rgba(0, 0, 0, $opacity)",spotlightColor:"rgba(66, 133, 244, 0.1)",buttonIconColor:"#ffffff",tooltipPosition:"auto",animationSpeed:300,keyboardNavigation:!0,scrollPadding:50,allowClose:!0,tooltipBackgroundColor:"linear-gradient(135deg, #2a2a2e, #1a1a1e)",tooltipTitleColor:"#4285f4",tooltipContentColor:"#fff",onStart:null,onFinish:null,onExit:null,...e},this.elements={container:null,overlay:null,glow:null,tooltip:null},this.isActive=!1,this.eventHandlers={},this.currentElement=null,this.originalZIndex=null}init(){return this.isActive||(this.createElements(),this.setupEvents(),this.showStep(this.currentStep),this.isActive=!0,"function"==typeof this.options.onStart&&this.options.onStart()),this}createElements(){this.elements.container=document.createElement("div"),this.elements.container.className="coding-intro-container",this.elements.overlay=document.createElement("div"),this.elements.overlay.className="coding-overlay",this.elements.overlay.style.backgroundColor=this.options.overlayColor.replace("$opacity",this.options.overlayOpacity),this.elements.glow=document.createElement("div"),this.elements.glow.className="coding-spotlight-glow",this.elements.glow.style.background=`radial-gradient(circle at 50% 50%, ${this.options.spotlightColor} 0%, transparent 70%)`,this.elements.tooltip=document.createElement("div"),this.elements.tooltip.className="coding-tooltip",this.elements.container.append(this.elements.overlay,this.elements.glow,this.elements.tooltip),document.body.appendChild(this.elements.container),this.injectStyles()}setupEvents(){this.eventHandlers.resize=()=>{this.isActive&&this.updateSpotlightPosition()},window.addEventListener("resize",this.eventHandlers.resize),this.eventHandlers.scroll=()=>{this.isActive&&this.updateSpotlightPosition()},window.addEventListener("scroll",this.eventHandlers.scroll,!0),this.options.keyboardNavigation&&(this.eventHandlers.keydown=t=>{this.isActive&&("ArrowRight"===t.key||"Enter"===t.key?this.next():"ArrowLeft"===t.key?this.prev():"Escape"===t.key&&this.options.allowClose&&this.exit())},document.addEventListener("keydown",this.eventHandlers.keydown)),this.eventHandlers.tooltipClick=t=>{t.target.closest(".coding-next")?this.next():t.target.closest(".coding-prev")?this.prev():t.target.closest(".coding-close")&&this.options.allowClose&&this.exit()},this.elements.tooltip.addEventListener("click",this.eventHandlers.tooltipClick)}injectStyles(){if(document.getElementById("coding-intro-styles"))return;let t=document.createElement("style");t.id="coding-intro-styles",t.textContent=`
      .coding-intro-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 9997;
        pointer-events: none;
      }
      .coding-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 9998;
        transition: opacity ${this.options.animationSpeed}ms ease;
        pointer-events: all;
        /* iOS-style advanced blur with mask */
        backdrop-filter: saturate(180%) blur(20px);
        -webkit-backdrop-filter: saturate(180%) blur(20px);
        mask-image: radial-gradient(circle at var(--spotlight-x, 50%) var(--spotlight-y, 50%), 
                                      transparent var(--spotlight-inner, 15px), 
                                      black var(--spotlight-outer, 16px), 
                                      black 100%);
        -webkit-mask-image: radial-gradient(circle at var(--spotlight-x, 50%) var(--spotlight-y, 50%), 
                                      transparent var(--spotlight-inner, 15px), 
                                      black var(--spotlight-outer, 16px), 
                                      black 100%);
      }
      .coding-spotlight-glow {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 9997;
        pointer-events: none;
        filter: blur(15px);
        transition: all ${this.options.animationSpeed}ms ease;
      }
      .coding-tooltip {
        position: fixed;
        background: ${this.options.tooltipBackgroundColor};
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
        max-width: 90%;
        width: 400px;
        z-index: 10000;
        text-align: center;
        animation: coding-tooltip-appear ${this.options.animationSpeed}ms ease-out;
        backdrop-filter: blur(5px);
        pointer-events: all;
        transition: top ${this.options.animationSpeed}ms ease, left ${this.options.animationSpeed}ms ease;
      }
      @keyframes coding-tooltip-appear {
        from { opacity: 0; transform: translateY(20px) scale(0.95); }
        to { opacity: 1; transform: translateY(0) scale(1); }
      }
      .coding-tooltip-header {
        font-size: 1.3rem;
        font-weight: 600;
        color: ${this.options.tooltipTitleColor};
        margin-bottom: 1rem;
      }
      .coding-tooltip-content {
        margin-bottom: 1.5rem;
        line-height: 1.5;
        color: ${this.options.tooltipContentColor};
      }
      .coding-tooltip-footer {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 1.5rem;
      }
      .coding-button {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background: #4285f4;
        cursor: pointer;
        transition: all 0.2s ease-out;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .coding-button:hover {
        background: #5c9eff;
        transform: scale(1.1);
        box-shadow: 0 0 15px rgba(66, 133, 244, 0.6);
      }
      .coding-button:active { transform: scale(0.95); }
      .coding-button:disabled {
        background: #b0b0b0;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }
      .coding-button svg {
        width: 24px;
        height: 24px;
        fill: ${this.options.buttonIconColor};
      }
      .coding-close {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      .coding-close:hover { background: rgba(255, 255, 255, 0.2); }
      .coding-close svg { width: 16px; height: 16px; fill: white; }
      @media (max-width: 600px) {
        .coding-tooltip { padding: 1rem; width: 85%; }
        .coding-tooltip-header { font-size: 1.1rem; }
        .coding-button { width: 35px; height: 35px; }
        .coding-button svg { width: 20px; height: 20px; }
      }
    `,document.head.appendChild(t)}async showStep(t){if(t<0||t>=this.steps.length)return;let e=this.steps[t],i=document.querySelector(e.selector);return i?(this.currentElement=i,this.originalZIndex=i.style.zIndex,i.style.zIndex="10000",this.currentStep=t,this.scrollToElement(i),await new Promise(t=>setTimeout(t,400)),this.positionSpotlightOnElement(i),this.updateTooltip(e),this.positionTooltip(i,e.tooltipPosition||this.options.tooltipPosition),Promise.resolve()):t<this.steps.length-1?this.showStep(t+1):this.exit()}positionSpotlightOnElement(t){let e=t.getBoundingClientRect(),i=e.left+e.width/2,o=e.top+e.height/2,n=Math.max(e.width,e.height)/2+this.options.spotlightPadding;document.documentElement.style.setProperty("--spotlight-x",`${i}px`),document.documentElement.style.setProperty("--spotlight-y",`${o}px`),document.documentElement.style.setProperty("--spotlight-inner",`${n}px`),document.documentElement.style.setProperty("--spotlight-outer",`${n+2}px`)}updateSpotlightPosition(){if(!this.isActive||this.currentStep>=this.steps.length)return;let t=this.steps[this.currentStep],e=document.querySelector(t.selector);e&&(this.positionSpotlightOnElement(e),this.positionTooltip(e,t.tooltipPosition||this.options.tooltipPosition))}scrollToElement(t){let e=t.getBoundingClientRect();if(!(e.top>=0&&e.bottom<=window.innerHeight)){let i=window.scrollY||document.documentElement.scrollTop;window.scrollTo({top:i+e.top-this.options.scrollPadding,behavior:"smooth"})}}updateTooltip(t){let e=`
      <div class="coding-tooltip-header">${t.title||""}</div>
      <div class="coding-tooltip-content">${t.content||""}</div>
      <div class="coding-tooltip-footer">
        <button class="coding-button coding-prev" ${0===this.currentStep?"disabled":""}>
          <svg viewBox="0 0 24 24"><path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"/></svg>
        </button>
        <button class="coding-button coding-next">
          <svg viewBox="0 0 24 24"><path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/></svg>
        </button>
      </div>
    `;this.options.allowClose&&(e=`<div class="coding-close">
                       <svg viewBox="0 0 24 24">
                         <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
                       </svg>
                     </div>`+e),this.elements.tooltip.innerHTML=e;let i=this.elements.tooltip.querySelector(".coding-next");i&&this.currentStep===this.steps.length-1&&(i.innerHTML=`<svg viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
                              </svg>`)}positionTooltip(t,e){let i=this.elements.tooltip.getBoundingClientRect(),o=t.getBoundingClientRect(),n=window.innerWidth,s=window.innerHeight,l={bottom:{top:o.bottom+20,left:o.left+o.width/2-i.width/2},top:{top:o.top-i.height-20,left:o.left+o.width/2-i.width/2},left:{top:o.top+o.height/2-i.height/2,left:o.left-i.width-20},right:{top:o.top+o.height/2-i.height/2,left:o.right+20}},r=t=>{let{top:e,left:o}=l[t];return e>=20&&o>=20&&e+i.height<=s-20&&o+i.width<=n-20},a="auto"===e?["bottom","top","right","left"].find(r)||"bottom":r(e)?e:["bottom","top","right","left"].filter(t=>t!==e).find(r)||"bottom",{top:h,left:p}=l[a];p<20&&(p=20),p+i.width>n-20&&(p=n-i.width-20),h<20&&(h=20),h+i.height>s-20&&(h=s-i.height-20),this.elements.tooltip.style.top=`${h}px`,this.elements.tooltip.style.left=`${p}px`,this.elements.tooltip.className=`coding-tooltip coding-position-${a}`}next(){return this.currentStep<this.steps.length-1?this.showStep(this.currentStep+1):this.finish(),this}prev(){return this.currentStep>0&&this.showStep(this.currentStep-1),this}finish(){return this.cleanUp(),"function"==typeof this.options.onFinish&&this.options.onFinish(),this}exit(){return this.cleanUp(),"function"==typeof this.options.onExit&&this.options.onExit(),this}cleanUp(){this.elements.container&&(this.elements.container.style.opacity="0",setTimeout(()=>this.elements.container.remove(),this.options.animationSpeed)),window.removeEventListener("resize",this.eventHandlers.resize),window.removeEventListener("scroll",this.eventHandlers.scroll,!0),this.options.keyboardNavigation&&document.removeEventListener("keydown",this.eventHandlers.keydown),this.currentElement&&(this.currentElement.style.zIndex=this.originalZIndex,this.currentElement=null,this.originalZIndex=null),this.isActive=!1}}
